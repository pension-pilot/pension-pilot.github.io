@page "/"
@using PensionPilot.Models.Config
@inject PensionPilot.Services.IConfigService ConfigService
@inject NavigationManager Nav
@using Microsoft.AspNetCore.Components
@using PensionPilot.Services

<div class="intro-box" role="note" aria-label="About PensionPilot">
    <div class="intro-title">
        <span class="bi bi-info-circle-fill me-1" aria-hidden="true"></span>
        About Pension Pilot
    </div>
    <ul class="mb-0">
        <li>Simulate retirement finances across portfolio, study fund, pension, salary, and RSUs, including income and capital gains taxes.</li>
        <li>Discover important portfolio milestones, such as potential early retirement age.</li>
        <li>Edit the inputs and click <strong>Calculate</strong> to see year-by-year cashflow and net worth on the results page.</li>
        <li>Inputs are saved in your browser's local storage.</li>
        <li>Use the <strong>Share</strong> button on the results page to get a link that contains your inputs. Opening that link loads a temporary plan, allowing you to either save or discard it.</li>
    </ul>
</div>

@if (_config is null)
{
    <p>Loading...</p>
}
else
{
    <TemporaryConfigBanner IsTemporary="isTemporary" />
    <div class="pb-4"> <!-- add bottom padding to avoid footer overlap on mobile when disclaimer visible -->
    <InputsForm Config="_config"
                ShowSave="true"
                ShowReloadDefaults="@(!isTemporary)"
                ShowCalculate="true"
                Save="OnSave"
                Calculate="OnCalculate"
                OnReloadDefaults="ReloadDefaults" />
    </div>
}

@code {
    private AppConfig? _config;
    private bool isTemporary;

    [SupplyParameterFromQuery(Name = "share")] public string? Share { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(Share) && ConfigShareHelper.TryDecode(Share, out var imported))
        {
            _config = imported;
            isTemporary = true;
        }
        if (_config is null)
        {
            _config = await ConfigService.GetConfigAsync();
        }
    }

    private async Task OnSave(AppConfig cfg)
    {
        // Ensure parent state uses the (possibly new) instance from child (e.g. after Import JSON)
        _config = cfg;
        await ConfigService.SetConfigAsync(cfg);
        if (isTemporary)
        {
            isTemporary = false;
            // Navigate to root relative to <base href>
            Nav.NavigateTo("", forceLoad: false);
        }
        StateHasChanged();
    }

    private async Task OnCalculate(AppConfig cfg)
    {
        if (isTemporary)
        {
            // Do not save yet; navigate with encoded config
            var b64 = ConfigShareHelper.Encode(cfg);
            Nav.NavigateTo($"planner?share={b64}");
            return;
        }
        await ConfigService.SetConfigAsync(cfg);
        Nav.NavigateTo("planner");
    }

    private async Task ReloadDefaults()
    {
        if (isTemporary) return; // don't reload defaults over a temporary shared config
        await ConfigService.ResetAsync();
        _config = await ConfigService.GetConfigAsync();
        StateHasChanged();
    }
}
