@page "/planner"
@using PensionPilot.Models.Config
@inject PensionPilot.Services.IConfigService ConfigService
@inject PensionPilot.Services.ICalculatorService Calc
@inject NavigationManager Nav
@using System.Globalization
@using System.Linq
@using PensionPilot.Services
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JS

<h3>Results</h3>

@if (_config is null || _results is null)
{
    <p>Calculating...</p>
}
else
{
    <TemporaryConfigBanner IsTemporary="isTemporaryConfig" />
    <div class="d-flex flex-wrap align-items-center gap-2 mt-3 mb-2">
        <button class="btn btn-sm btn-cyan-outline" @onclick="() => columnsPanelVisible = !columnsPanelVisible">
            <i class="bi bi-columns me-1"></i>
            Columns
        </button>
        <button class="btn btn-sm btn-cyan-outline" @onclick="ExportCsv">
            <i class="bi bi-filetype-csv me-1"></i>
            Export CSV
        </button>
    <button class="btn btn-sm btn-cyan-outline position-relative" @onclick="ShareConfig">
            @if (copied)
            {
                <span>
            <i class="bi bi-clipboard-check me-1"></i>
                    Copied!
                </span>
            }
            else
            {
                <span>
            <i class="bi bi-share me-1"></i>
                    Share
                </span>
            }
        </button>
        @if (isTemporaryConfig)
        {
            <button class="btn btn-sm btn-temp" @onclick="SaveTemporaryConfig">
                <i class="bi bi-eye-fill me-1"></i>
                View Shared Configuration
            </button>
        }
    </div>
    <div class="mt-2 mb-3 text-muted small border rounded p-2">
        <div>Net worth at the age of @_config.Timeline.ModelEndAge: <strong>@FormatNumber(_results.Last().NetWorthEnd)</strong></div>
        @if (_landmarksParts.Count > 0)
        {
            @foreach (var part in _landmarksParts)
            {
                <div>@part</div>
            }
        }
    </div>
    @if (columnsPanelVisible)
    {
        <div class="card card-body p-2 mb-3 small">
            <QuickGrid Items="_columnDefs.AsQueryable()" Class="table table-sm mb-2">
                <TemplateColumn Title="Show">
                    <ChildContent Context="c">
                        <input type="checkbox" checked="@IsColumnShown(c.Key)" @onchange="e => OnColumnToggled(c.Key, e)" />
                    </ChildContent>
                </TemplateColumn>
                <PropertyColumn Property="@(c => c.Title)" Title="Column" />
                <PropertyColumn Property="@(c => c.Description)" Title="Description" />
            </QuickGrid>
        </div>
    }

    <div class="table-responsive border rounded p-1 mb-3">
        <QuickGrid Items="_results.AsQueryable()" Class="table table-sm mb-0">
            <PropertyColumn Property="@(p => p.Age)" Title="Age" />
            @if (IsColumnShown(nameof(PensionPilot.Services.YearResult.SalaryGross))) { <PropertyColumn Property="@(p => p.SalaryGross)" Title="Salary Gross" Format="N0" /> }
            @if (IsColumnShown(nameof(PensionPilot.Services.YearResult.SalaryTax))) { <PropertyColumn Property="@(p => p.SalaryTax)" Title="Salary Tax" Format="N0" /> }
            @if (IsColumnShown(nameof(PensionPilot.Services.YearResult.SalaryNet))) { <PropertyColumn Property="@(p => p.SalaryNet)" Title="Salary Net" Format="N0" /> }
            @if (IsColumnShown(nameof(PensionPilot.Services.YearResult.RsuNet))) { <PropertyColumn Property="@(p => p.RsuNet)" Title="RSU Net" Format="N0" /> }
            @if (IsColumnShown(nameof(PensionPilot.Services.YearResult.PensionPayoutNet))) { <PropertyColumn Property="@(p => p.PensionPayoutNet)" Title="Pension Net" Format="N0" /> }
            @if (IsColumnShown(nameof(PensionPilot.Services.YearResult.NetIncome))) { <PropertyColumn Property="@(p => p.NetIncome)" Title="Net Income" Format="N0" /> }
            @if (IsColumnShown(nameof(PensionPilot.Services.YearResult.PortfolioEnd))) { <PropertyColumn Property="@(p => p.PortfolioEnd)" Title="Portfolio EOY" Format="N0" /> }
            @if (IsColumnShown(nameof(PensionPilot.Services.YearResult.StudyFundEnd))) { <PropertyColumn Property="@(p => p.StudyFundEnd)" Title="Study Fund EOY" Format="N0" /> }
            @if (IsColumnShown(nameof(PensionPilot.Services.YearResult.PensionBalanceEnd))) { <PropertyColumn Property="@(p => p.PensionBalanceEnd)" Title="Pension EOY" Format="N0" /> }
            @if (IsColumnShown(nameof(PensionPilot.Services.YearResult.NetCashflow))) { <PropertyColumn Property="@(p => p.NetCashflow)" Title="Net Cashflow" Format="N0" /> }
            @if (IsColumnShown(nameof(PensionPilot.Services.YearResult.Expenses))) { <PropertyColumn Property="@(p => p.Expenses)" Title="Expenses" Format="N0" /> }
            @if (IsColumnShown(nameof(PensionPilot.Services.YearResult.NetWorthEnd))) { <PropertyColumn Property="@(p => p.NetWorthEnd)" Title="Net Worth" Format="N0" /> }
        </QuickGrid>
    </div>
    <NetWorthChart Results="_results" Achievements="_achievements" />
}

@code {
    private AppConfig? _config;
    private IReadOnlyList<PensionPilot.Services.YearResult>? _results;
    private bool columnsPanelVisible;
    private bool copied;
    private bool isTemporaryConfig;
    private string? shareUrl;
    private List<AchievementPoint> _achievements = new();
    private readonly List<string> _landmarksParts = new();

    private static string FormatNumber(decimal value)
    => string.Format(CultureInfo.InvariantCulture, "{0:N0}", value);

    private List<ColumnMeta> _columnDefs = new();

    [SupplyParameterFromQuery(Name = "share")] public string? Share { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        // Prefer config from shared query, otherwise load saved config
        if (!string.IsNullOrWhiteSpace(Share) && ConfigShareHelper.TryDecode(Share, out var imported))
        {
            _config = imported;
            isTemporaryConfig = true;
        }
        if (_config is null)
        {
            _config = await ConfigService.GetConfigAsync();
        }
        EnsureColumnsDictionary();
        BuildColumnDefs();
        await Run();
    }

    private void EnsureColumnsDictionary()
    {
        if (_config is null) return;
        if (_config.Columns is null) _config.Columns = new();
        foreach (var kvp in ColumnVisibilityDefaults.Defaults)
        {
            if (!_config.Columns.ContainsKey(kvp.Key))
                _config.Columns[kvp.Key] = kvp.Value;
        }
    }

    private void BuildColumnDefs()
    {
        _columnDefs = new()
        {
            new ColumnMeta(nameof(YearResult.SalaryTax), "Salary Tax", "Income + social taxes on salary."),
            new ColumnMeta(nameof(YearResult.SalaryGross), "Salary Gross", "Annual gross salary if working."),
            new ColumnMeta(nameof(YearResult.SalaryNet), "Salary Net", "Salary after tax and employee contributions."),
            new ColumnMeta(nameof(YearResult.RsuNet), "RSU Net", "Vested RSU value after income tax (sell-on-vest)."),
            new ColumnMeta(nameof(YearResult.PensionPayoutNet), "Pension Net", "Pension annuity after income tax."),
            new ColumnMeta(nameof(YearResult.NetIncome), "Net Income", "Total net inflows (salary + RSU + pension + additional)."),
            new ColumnMeta(nameof(YearResult.PortfolioEnd), "Portfolio EOY", "End-of-year taxable portfolio balance."),
            new ColumnMeta(nameof(YearResult.StudyFundEnd), "Study Fund EOY", "End-of-year study fund balance."),
            new ColumnMeta(nameof(YearResult.PensionBalanceEnd), "Pension EOY", "Remaining pension fund balance."),
            new ColumnMeta(nameof(YearResult.NetCashflow), "Net Cashflow", "Income (net) minus expenses."),
            new ColumnMeta(nameof(YearResult.Expenses), "Expenses", "Annual expenses for the year."),
            new ColumnMeta(nameof(YearResult.NetWorthEnd), "Net Worth", "Portfolio + Study Fund + Pension EOY."),
        };
    }

    private async Task Run()
    {
        if (_config is null) return;
        _results = await Calc.ProjectAsync(_config);
        BuildAchievementMarkers();
    }

    private void BuildAchievementMarkers()
    {
        _achievements.Clear();
        _landmarksParts.Clear();
        if (_results is null || _results.Count == 0) return;

        bool addedReturnExceedsContribution = false;
        bool addedReturnExceedsSalary = false;
        bool addedWithdrawalRateCoversExpenses = false;

        for (int i = 0; i < _results.Count; i++)
        {
            var r = _results[i];
            if (r.PortfolioReturnExceedsContribution)
            {
                _achievements.Add(new AchievementPoint(i, r.Age, r.NetWorthEnd, LandmarkDescriptions.ReturnExceedsContribution, "rgb(255,215,0)"));
                if (!addedReturnExceedsContribution)
                {
                    _landmarksParts.Add($"{LandmarkDescriptions.ReturnExceedsContribution} at age {r.Age}");
                    addedReturnExceedsContribution = true;
                }
            }
            
            if (r.PortfolioReturnExceedsSalary)
            {
                _achievements.Add(new AchievementPoint(i, r.Age, r.NetWorthEnd, LandmarkDescriptions.ReturnExceedsSalary, "rgb(255,99,132)"));
                if (!addedReturnExceedsSalary)
                {
                    _landmarksParts.Add($"{LandmarkDescriptions.ReturnExceedsSalary} at age {r.Age}");
                    addedReturnExceedsSalary = true;
                }
            }

            if (r.WithdrawalRateCoversExpenses)
            {
                _achievements.Add(new AchievementPoint(i, r.Age, r.NetWorthEnd, LandmarkDescriptions.WithdrawalRateCoversExpenses, "rgb(46, 204, 113)"));
                if (!addedWithdrawalRateCoversExpenses)
                {
                    _landmarksParts.Add($"{LandmarkDescriptions.WithdrawalRateCoversExpenses} at age {r.Age}");
                    addedWithdrawalRateCoversExpenses = true;
                }
            }
        }
    }

    private async Task ShareConfig()
    {
        if (_config is null) return;
        copied = false;
        var b64 = ConfigShareHelper.Encode(_config);
        shareUrl = Nav.BaseUri.TrimEnd('/') + "/planner?share=" + b64;
        var status = await JS.InvokeAsync<string>("pp.shareOrCopy", "PensionPilot Plan", "Shared PensionPilot configuration", shareUrl);
        if (status == "copied")
        {
            copied = true;
            _ = Task.Run(async () => { await Task.Delay(2000); copied = false; StateHasChanged(); });
            StateHasChanged();
        }
    }

    private async Task SaveTemporaryConfig()
    {
        if (!isTemporaryConfig || _config is null) return;
        await ConfigService.SetConfigAsync(_config);
        isTemporaryConfig = false;
        Nav.NavigateTo($"?share={ConfigShareHelper.Encode(_config)}", forceLoad: false);
    }

    private async Task ExportCsv()
    {
        if (_results is null) return;
        var bytes = CsvExportHelper.BuildYearResultsCsv(_results);
        var base64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("pp.saveFile", $"planner-results-{DateTime.UtcNow:yyyyMMddHHmmss}.csv", base64, "text/csv");
    }

    private bool IsColumnShown(string key) => _config?.Columns.TryGetValue(key, out var visible) == true && visible;

    private async Task OnColumnToggled(string key, ChangeEventArgs e)
    {
        if (_config is null) return;
        var newVal = e.Value is bool b ? b : string.Equals(e.Value?.ToString(), "true", StringComparison.OrdinalIgnoreCase);
        _config.Columns[key] = newVal;
        await ConfigService.SetConfigAsync(_config);
        StateHasChanged();
    }

    private record ColumnMeta(string Key, string Title, string Description);
}